"""
axo/runtime/local.py
~~~~~~~~~~~~~~~~~~~~

Concrete **local** implementation of :class:`axo.runtime.runtime.ActiveXRuntime`.

The class spins up:

* a bounded :class:`queue.Queue` used by the global scheduler to enqueue
  :class:`axo.scheduler.Task` objects,
* a minimal :class:`axo.endpoint.LocalEndpoint` for metadata operations, and
* a :class:`axo.storage.data.LocalStorageService` that persists data to the
  local filesystem.

Because everything runs in‑process, no network calls are performed, making
`LocalRuntime` ideal for unit tests or single‑node deployments.
"""

from __future__ import annotations

import logging
from queue import Queue
from typing import Optional

from option import NONE, Option
from axo.endpoint.manager import LocalEndpointManager
from axo.runtime.core import ActiveXRuntime
from axo.scheduler import AxoScheduler
from axo.storage.data import LocalStorageService, StorageService

# --------------------------------------------------------------------------- #
# Logger (module‑local)
# --------------------------------------------------------------------------- #
logger = logging.getLogger(__name__)
if not logger.handlers:
    _h = logging.StreamHandler()
    _h.setFormatter(
        logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    )
    logger.addHandler(_h)
logger.setLevel(logging.DEBUG)


# ============================================================================
# Local runtime
# ============================================================================
class LocalRuntime(ActiveXRuntime):
    """
    Single‑process runtime: tasks are executed in the current Python interpreter
    without any remote calls.

    Parameters
    ----------
    runtime_id :
        Optional identifier; if empty a nanoid will be generated by the
        :class:`ActiveXRuntime` base‑class.
    maxsize :
        Maximum number of pending tasks in the internal queue.
    storage_service :
        Custom storage backend (useful for dependency injection in tests).
        If ``NONE`` (default) a :class:`LocalStorageService` instance is created.
    """

    def __init__(
        self,
        runtime_id: str = "",
        is_distributed: bool = False,
        maxsize: int = 100,
        storage_service: Option[StorageService] = NONE,
    ) -> None:
        # Shared task queue ------------------------------------------------
        q: Queue = Queue(maxsize=maxsize)

        # Endpoint manager with a single local endpoint --------------------
        ep_manager = LocalEndpointManager()
        ep_manager.add_endpoint(endpoint_id="local-endpoint-0")

        # Storage backend (provided or default) ----------------------------
        store: StorageService = storage_service.unwrap_or(
            LocalStorageService(storage_service_id="local-store")
        )

        # Scheduler --------------------------------------------------------
        scheduler = AxoScheduler(tasks=[], runtime_queue=q)

        # Bootstrap the base class ----------------------------------------
        super().__init__(
            q=q,
            endpoint_manager=ep_manager,
            storage_service=store,
            scheduler=scheduler,
            runtime_id=runtime_id,
            is_distributed=is_distributed,
        )

    # ------------------------------------------------------------------ #
    # Runtime control
    # ------------------------------------------------------------------ #
    def stop(self) -> None:
        """Gracefully stop the background thread."""
        logger.debug("Stopping LocalRuntime %s …", self.runtime_id)
        self._running = False
